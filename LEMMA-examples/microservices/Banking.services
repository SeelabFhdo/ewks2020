import datatypes from "../domain models/Banking.data" as banking
import technology from "../technology/java.technology" as java

/**
 * An architecture-internal microservice for handling banking-related concerns
 */
@technology(java)
@sync(java::_protocols.rest)
@async(java::_protocols.amqp)
@endpoints(
    java::_protocols.rest: "/banking", "/bnk";
    java::_protocols.amqp: "/amqp/banking";
)
architecture functional microservice org.example.BankingService {
    // Interface for Bank-related concerns
    @endpoints(java::_protocols.rest: "/banks";)
    interface Bank {
        ---
        Create a bank.

        @required name Name of the bank.
        @required address Address of the bank.
        @required bic BIC of the bank.
        ---
        createBank(
            sync in name : string,
            sync in address : string,
            sync in bic : string
        );

        ---
        Retrieve a bank.

        @param bankName Name of the bank.
        @param bic BIC of the bank.
        ---
        @endpoints(java::_protocols.rest: "/{bankName}", "/{bic}";)
        getBank(
            sync in bankName? : string,
            sync in bic? : string,
            sync out bank : banking::v1.Banking.Bank
        );

        ---
        Assign an account to a bank.

        @required bankName Name of the bank.
        @required managedAccount The account to be added.
        ---
        addManagedAccount(
            sync in bankName : string,
            sync in managedAccount : banking::v1.Banking.Account,
            sync out fault errorCode : int
        );
    }

    // Interface for Account-related concerns
    @endpoints(java::_protocols.rest: "/accounts";)
    interface Account {
        ---
        Create an account.

        @required bank The bank of the account.
        @required initialBalance The initial balance for the account.
        ---
        createAccount(
            sync in bank : banking::v1.Banking.Bank,
            sync in initialBalance : double,
            sync out createdAccount : banking::v1.Banking.Account,
            sync out fault errorCode : int
        );

        ---
        Retrieve information about an account.

        @required accountId The ID of the account.
        ---
        @endpoints(java::_protocols.rest: "/{accountId}";)
        getAccount(
            sync in accountId : long,
            sync out account : banking::v1.Banking.Account
        );

        ---
        Retrieve information about all acounts of a bank.

        @param bankName Name of the bank.
        @param bic BIC of the bank.
        ---
        @endpoints(java::_protocols.rest: "/{bankName}", "/{bic}";)
        getAllAccounts(
            sync in bankName? : string,
            sync in bic? : string,
            sync out accounts : banking::v1.Banking.Accounts
        );

        ---
        Transfer money to a bank account.

        @required accountId ID of the receiving account.
        @required amount The amount of money to be transferred.
        ---
        transferMoney(
            sync in accountId : long,
            sync in amount : double,
            sync out fault errorCode : int
        );
    }
}
