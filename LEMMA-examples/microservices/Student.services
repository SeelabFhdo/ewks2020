import datatypes from "../domain models/Banking.data" as banking
import datatypes from "../domain models/Student.data" as student
import microservices from "Banking.services" as bankingServices
import technology from "../technology/java.technology" as java

/**
 * A microservice for handling student-related concerns
 */
@technology(java)
@sync(java::_protocols.rest)
@endpoints(java::_protocols.rest: "/students";)
public functional microservice org.example.StudentService {
    // This service requires the BankingService
    required microservices {
        bankingServices::org.example.BankingService
    }

    // Interface for Course-related concerns
    @endpoints(java::_protocols.rest: "/courses";)
    interface Course {
        ---
        Create a new course.

        @required number The course number.
        @required name The name of the course.
        @param offeredInWinterTerm Flag to indicate that the course is to be
            offered in the winter term.
        @param offeredInSummerTerm Flag to indicate that the course is to be
            offered in the summer term.
        ---
        createCourse(
            sync number : int,
            sync name : string,
            sync offeredInWinterTerm? : boolean,
            sync offeredInSummerTerm? : boolean
        );

        ---
        Retrieve information about a course.

        @required courseNumber The number of the course.
        ---
        @endpoints(java::_protocols.rest: "/{courseNumber}";)
        getCourse(
            sync courseNumber : int,
            sync out course : student::Student.Course
        );
    }

    // Interface for Student-related concerns
    interface Student {
        ---
        Create a student.

        @required firstname The first name of the student.
        @required lastname The last name of the student.
        @required gender The gender of the student.
        @required birthday The birthday of the student.
        @required studentNumber The student's number.
        @required numberOfTerms Number of terms of the student.
        @param paidTuitionFeeForCurrentTerm Did the student paid the tuition
            fee for the current term?
        ---
        createStudent(
            sync firstname : string,
            sync lastname : string,
            sync gender : string,
            sync birthday : date,
            sync studentNumber : int,
            sync numberOfTerms : int,
            sync paidTuitionFeeForCurrentTerm? : boolean
        );

        ---
        Assign a course to a student.

        @required course The course to be assigned.
        @required student The student.
        ---
        addCourse(
            sync in course : student::Student.Course,
            sync in student : student::Student.Student
        );

        ---
        Retrieve information about a student.

        @required studentNumber The number of the student.
        ---
        @endpoints(java::_protocols.rest: "/{studentNumber}";)
        getStudent(
            sync in studentNumber : int,
            sync out student : student::Student.Student
        );
    }

    // Consolidating interface for get-operations
    interface Read {
        @endpoints(java::_protocols.rest: "/read/course/{courseNumber}";)
        refers Course.getCourse;

        @endpoints(java::_protocols.rest: "/read/student/{studentNumber}";)
        refers Student.getStudent;
    }

    // Internal interface for Person-related concerns
    internal interface Person {
        ---
        Create a person.

        @required firstname The first name of the person.
        @required lastname The last name of the person.
        @required gender The person's gender.
        @required birthday The person's birthday.
        ---
        createPerson(
            sync firstname : string,
            sync lastname : string,
            sync gender : string,
            sync birthday : date
        );

        ---
        Assign a bank account to a person.

        @required person The person.
        @required newAccount The account to be assigned.
        ---
        addAccount(
            sync person : student::Person.Person,
            sync newAccount : banking::v1.Banking.Account,
            sync out fault errorCode : int
        );

        ---
        Get information about a person.

        @required firstname The first name of the person.
        @required lastname The last name of the person.
        @required birthday The person's birthday.
        ---
        getPerson(
            sync firstname : string,
            sync lastname : string,
            sync birthday : date,
            sync out person : student::Person.Person
        );
    }
}